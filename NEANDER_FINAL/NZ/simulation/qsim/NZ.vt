// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/26/2019 09:36:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Reg2bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Reg2bits_vlg_sample_tst(
	clear,
	clk,
	input,
	load,
	preset,
	seletor,
	sampler_tx
);
input  clear;
input  clk;
input [1:0] input;
input  load;
input  preset;
input  seletor;
output sampler_tx;

reg sample;
time current_time;
always @(clear or clk or input or load or preset or seletor)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Reg2bits_vlg_check_tst (
	Output,
	Output_bar,
	sampler_rx
);
input [1:0] Output;
input [1:0] Output_bar;
input sampler_rx;

reg [1:0] Output_expected;
reg [1:0] Output_bar_expected;

reg [1:0] Output_prev;
reg [1:0] Output_bar_prev;

reg [1:0] Output_expected_prev;
reg [1:0] Output_bar_expected_prev;

reg [1:0] last_Output_exp;
reg [1:0] last_Output_bar_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Output_prev = Output;
	Output_bar_prev = Output_bar;
end

// update expected /o prevs

always @(trigger)
begin
	Output_expected_prev = Output_expected;
	Output_bar_expected_prev = Output_bar_expected;
end


// expected \Output [ 1 ]
initial
begin
	Output_expected[1] = 1'bX;
end 
// expected \Output [ 0 ]
initial
begin
	Output_expected[0] = 1'bX;
end 
// expected Output_bar[ 1 ]
initial
begin
	Output_bar_expected[1] = 1'bX;
end 
// expected Output_bar[ 0 ]
initial
begin
	Output_bar_expected[0] = 1'bX;
end 
// generate trigger
always @(Output_expected or Output or Output_bar_expected or Output_bar)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Output = %b | expected Output_bar = %b | ",Output_expected_prev,Output_bar_expected_prev);
	$display("| real Output = %b | real Output_bar = %b | ",Output_prev,Output_bar_prev);
`endif
	if (
		( Output_expected_prev[0] !== 1'bx ) && ( Output_prev[0] !== Output_expected_prev[0] )
		&& ((Output_expected_prev[0] !== last_Output_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[0] = Output_expected_prev[0];
	end
	if (
		( Output_expected_prev[1] !== 1'bx ) && ( Output_prev[1] !== Output_expected_prev[1] )
		&& ((Output_expected_prev[1] !== last_Output_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[1] = Output_expected_prev[1];
	end
	if (
		( Output_bar_expected_prev[0] !== 1'bx ) && ( Output_bar_prev[0] !== Output_bar_expected_prev[0] )
		&& ((Output_bar_expected_prev[0] !== last_Output_bar_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output_bar[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_bar_expected_prev);
		$display ("     Real value = %b", Output_bar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Output_bar_exp[0] = Output_bar_expected_prev[0];
	end
	if (
		( Output_bar_expected_prev[1] !== 1'bx ) && ( Output_bar_prev[1] !== Output_bar_expected_prev[1] )
		&& ((Output_bar_expected_prev[1] !== last_Output_bar_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output_bar[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_bar_expected_prev);
		$display ("     Real value = %b", Output_bar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Output_bar_exp[1] = Output_bar_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Reg2bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clear;
reg clk;
reg [1:0] input;
reg load;
reg preset;
reg seletor;
// wires                                               
wire [1:0] Output;
wire [1:0] Output_bar;

wire sampler;                             

// assign statements (if any)                          
Reg2bits i1 (
// port map - connection between master ports and signals/registers   
	.clear(clear),
	.clk(clk),
	.\input (input),
	.load(load),
	.\Output (Output),
	.Output_bar(Output_bar),
	.preset(preset),
	.seletor(seletor)
);

// clk
initial
begin
	repeat(58)
	begin
		clk = 1'b0;
		clk = #8500 1'b1;
		# 8500;
	end
	clk = 1'b0;
	clk = #8500 1'b1;
end 

// load
initial
begin
	repeat(43)
	begin
		load = 1'b0;
		load = #11500 1'b1;
		# 11500;
	end
	load = 1'b0;
end 
// \input [ 1 ]
initial
begin
	input[1] = 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #10000 1'b1;
	input[1] = #10000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #20000 1'b0;
	input[1] = #10000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #10000 1'b0;
	input[1] = #10000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #45000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #10000 1'b1;
	input[1] = #20000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #25000 1'b0;
	input[1] = #10000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #15000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #10000 1'b0;
	input[1] = #10000 1'b1;
	input[1] = #15000 1'b0;
	input[1] = #20000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #15000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #10000 1'b1;
	input[1] = #20000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #10000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #15000 1'b1;
	input[1] = #10000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #25000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #25000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #15000 1'b0;
	input[1] = #10000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #10000 1'b0;
	input[1] = #10000 1'b1;
	input[1] = #20000 1'b0;
	input[1] = #10000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #10000 1'b1;
	input[1] = #15000 1'b0;
	input[1] = #10000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #15000 1'b0;
	input[1] = #20000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #20000 1'b1;
	input[1] = #15000 1'b0;
	input[1] = #15000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #10000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #10000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #35000 1'b1;
	input[1] = #15000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #20000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #10000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #20000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #10000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #10000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #5000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #15000 1'b0;
	input[1] = #5000 1'b1;
	input[1] = #10000 1'b0;
	input[1] = #5000 1'b1;
end 
// \input [ 0 ]
initial
begin
	input[0] = 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #20000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #10000 1'b1;
	input[0] = #20000 1'b0;
	input[0] = #5000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #10000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #5000 1'b1;
	input[0] = #15000 1'b0;
	input[0] = #5000 1'b1;
	input[0] = #15000 1'b0;
	input[0] = #10000 1'b1;
	input[0] = #45000 1'b0;
	input[0] = #5000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #20000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #30000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #5000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #10000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #10000 1'b1;
	input[0] = #10000 1'b0;
	input[0] = #10000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #30000 1'b1;
	input[0] = #30000 1'b0;
	input[0] = #10000 1'b1;
	input[0] = #25000 1'b0;
	input[0] = #40000 1'b1;
	input[0] = #10000 1'b0;
	input[0] = #20000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #15000 1'b1;
	input[0] = #10000 1'b0;
	input[0] = #10000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #10000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #10000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #20000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #25000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #5000 1'b1;
	input[0] = #10000 1'b0;
	input[0] = #10000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #10000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #10000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #20000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #5000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #5000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #5000 1'b1;
	input[0] = #10000 1'b0;
	input[0] = #10000 1'b1;
	input[0] = #15000 1'b0;
	input[0] = #10000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #15000 1'b1;
	input[0] = #10000 1'b0;
	input[0] = #5000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #5000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #15000 1'b1;
	input[0] = #25000 1'b0;
	input[0] = #5000 1'b1;
	input[0] = #15000 1'b0;
	input[0] = #10000 1'b1;
	input[0] = #15000 1'b0;
	input[0] = #5000 1'b1;
	input[0] = #15000 1'b0;
	input[0] = #5000 1'b1;
	input[0] = #15000 1'b0;
	input[0] = #5000 1'b1;
	input[0] = #5000 1'b0;
	input[0] = #5000 1'b1;
	input[0] = #25000 1'b0;
	input[0] = #20000 1'b1;
end 

// clear
initial
begin
	clear = 1'b0;
end 

// preset
initial
begin
	preset = 1'b0;
end 

// seletor
initial
begin
	seletor = 1'b0;
end 

Reg2bits_vlg_sample_tst tb_sample (
	.clear(clear),
	.clk(clk),
	.input(input),
	.load(load),
	.preset(preset),
	.seletor(seletor),
	.sampler_tx(sampler)
);

Reg2bits_vlg_check_tst tb_out(
	.Output(Output),
	.Output_bar(Output_bar),
	.sampler_rx(sampler)
);
endmodule

